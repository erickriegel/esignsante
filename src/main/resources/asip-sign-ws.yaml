openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
-  description: SwaggerHub API Auto Mocking
   url: https://asipsign.asipsante.fr{basePath}/
   variables:
      port:
         enum:
         - '8080'
         default: '8080'
      basePath:
         default: /
info:
   description: "API du composant ASIP-Sign. \nCe composant dit de \"signature\" mutualise et homogénéise la mise en oeuvre\
      \ des besoins autour de la signature. \nIl permet aux partenaires de l'ASIP Santé de signer leurs documents ainsi que\
      \ de vérifier la validité d'une signature ou d'un certificat.    \n"
   version: 2.0.0.3
   title: ASIP-Sign
   contact:
      email: Maxim.JURAVLIOV.EXT@asipsante.fr
tags:
-  name: client
   description: Ressources offertes au client.
-  name: ca
   description: Ressource pour obtenir la liste des autorités de certification utilisées pour signer ou vérifier une signature
      ou un certificat.
-  name: configurations
   description: Ressource permettant de lister les différentes configurations disponibles au client.
-  name: xmldsig
   description: Ressources permettant de signer un document au format XMLDsig et/ou de vérifier un flux signé en XMLDsig avec
      ou sans preuve.
-  name: xades
   description: Ressources permettant de signer un document au format Xades Baseline B et/ou de vérifier un flux signé en
      XADES Baseline B avec ou sans preuve.
-  name: certificats
   description: Ressources permettant de vérifier un certificat avec ou sans preuve.
paths:
   /:
      get:
         summary: Liste des opérations disponibles.
         operationId: getOperations
         description: "Opération qui permet au client de lister les opérations offertes par le composant ASIP Sign.      \
            \         \n"
         tags:
         - client
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: array
                        items:
                           type: string
                           example: "/ \n/configurations \n/ca \n/signatures/xmldsig \n/signatures/xmldsigwithproof \n/signatures/xadesbaselineb\
                              \ \n/signatures/xadesbaselinebwithproof \n/validation/signatures/xmldsig \n/validation/signatures/xmldsigwithproof\
                              \ \n/validation/signatures/xadesbaselineb \n/validation/signatures/xadesbaselinebwithproof \n\
                              /validation/certificats \n/validation/certificatswithproof"
            '400':
               description: Requête mal formée.
            '500':
               description: Erreur interne du serveur.
   /configurations:
      get:
         summary: Liste des configurations disponibles.
         operationId: getConfigurations
         description: "Opération qui permet au client de récupérer les configurations disponibles afin qu'il puisse utiliser\
            \ la configuration qui correspond à l'usage souhaité.   \n"
         tags:
         - configurations
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/Conf'
                        example:
                           signature:
                           -  Confsign:
                                 idSignConf: 1
                                 description: Fichier de configuration pour la signature enveloppante de document (type de
                                    document libre).
                                 signaturePackaging: ENVELOPING
                                 digestAlgorithm: SHA256
                                 canonicalisationAlgorithm: http://www.w3.org/2001/10/xml-exc-c14n#
                                 dn: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75), C=FR # #
                           -  Confsign:
                                 idSignConf: 2
                                 description: Fichier de configuration pour la signature enveloppée d'un document XML.
                                 signaturePackaging: ENVELOPED
                                 digestAlgorithm: SHA1
                                 canonicalisationAlgorithm: http://www.w3.org/TR/2001/REC-xml-c14n-20010315
                                 dn: CN=asipsign.flux.henix.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75),
                                    C=FR
                           signatureVerification:
                           -  ConfVerifSign:
                                 idVerifSignConf: 1
                                 description: Configuration pour vérifier les signatures (jeux de règles complet).
                                 rules:
                                 -  rule:
                                       id: SignatureCertificatValide
                                       description: Vérification de la validité de la signature du certificat.
                                 -  rule:
                                       id: ExistanceBaliseSigningTime
                                       description: La balise "SigningTime" existe dans la signature.
                                 -  rule:
                                       id: ExistanceDuCertificatDeSignature
                                       description: Le certificat utilisé pour la signature existe dans la signature.
                                 -  rule:
                                       id: ExpirationCertificat
                                       description: Le certificat de signature n'est pas expiré.
                                 -  rule:
                                       id: NonRepudiation
                                       description: L'usage de la clé du certificat correspond à un usage de signature électronique
                                          et de non répudiation.
                                 -  rule:
                                       id: RevocationCertificat
                                       description: Le certificat de signature n'est pas révoqué.
                                 -  rule:
                                       id: SignatureNonVide
                                       description: La signature existe et elle n'est pas vide.
                                 -  rule:
                                       id: TrustedCertificat
# Cette règle est à vérifier (peut-être incluse dans ValidationSignature)
                                       description: L'Autorité de Certification est reconnue.
                                 -  rule:
                                       id: ValidationSignature
                                       description: Le contenu de la signature est valide.
#                                -  rule:
#                                      id: FormatSignature
#                                      description: Le format de la signature est valide.
# Cette règle est à vérifier (peut-être incluse dans ValidationSignature)
                           -  ConfVerifSign:
                                 idVerifSignConf: 2
                                 description: Configuration minimaliste pour vérifier les signatures (uniquement la signature
                                    du certificat de signature).
                                 rules:
                                 -  rule:
                                       id: SignatureCertificatValide
                                       description: Vérification de la validité de la signature du certificat.
                                 metaData:
                                 - DATE_SIGNATURE
                           certificatVerification:
                           -  ConfVerifCert:
                                 idVerifCertConf: 1
                                 description: Configuration par défaut (toutes les règles activées) pour vérifier les certificats.
                                 rules:
                                 -  rule:
                                       id: SignatureCertificatValide
                                       description: Vérification de la validité de la signature du certificat.
                                 -  rule:
                                       id: ExpirationCertificat
                                       description: Le certificat n'est pas expiré.
                                 -  rule:
                                       id: RevocationCertificat
                                       description: Le certificat n'est pas révoqué.
                                 -  rule:
                                       id: TrustedCertificat
                                       description: L'Autorité de Certification est reconnue.
                           -  ConfVerifCert:
                                 idVerifCertConf: 2
                                 description: Configuration minimaliste pour vérifier les certificats (uniquement la validité
                                    dde la signature du certificat)
                                 rules:
                                 -  rule:
                                       id: SignatureCertificatValide
                                       description: Vérification de la validité de la signature du certificat.
                                 metaData:
                                 - DN_CERTIFICATE
                           preuve:
                           -  ConfProof:
                                 idProofConf: 1
                                 description: Configuration pour demander une preuve signée au format SHA1.
                                 digestAlgorithm: SHA1
                                 canonicalisationAlgorithm: http://www.w3.org/2001/10/xml-exc-c14n#
                                 dn: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75), C=FR
                           -  ConfProof:
                                 idProofConf: 2
                                 description: Configuration pour demander une preuve signée au format SHA256.
                                 digestAlgorithm: SHA256 # #
                                 canonicalisationAlgorithm: http://www.w3.org/TR/2001/REC-xml-c14n-20010315
                                 dn: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75), C=FR
            '400':
               description: Requête mal formée.
            '500':
               description: Erreur interne du serveur.
   /ca:
      get:
         summary: Liste des Autorités de Certification de confiance utilisées par la plateforme.
         operationId: getCA
         description: |
            Opération qui permet au client de prendre connaissance des Autorités de Certification de confiance utilisées par la plateforme.
         tags:
         - ca
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: array
                        items:
                           type: string
                        example:
                        - CN=TEST AC IGC-SANTE ELEMENTAIRE ORGANISATIONS,OU=IGC-SANTE TEST,OU=0002 187512751,O=ASIP-SANTE,C=FR
                        - CN=TEST AC RACINE IGC-SANTE ELEMENTAIRE,OU=IGC-SANTE TEST,OU=0002 187512751,O=ASIP-SANTE,C=FR
            '400':
               description: Requête mal formée
            '500':
               description: Erreur interne du serveur.
   /signatures/xmldsig:
      post:
         tags:
         - xmldsig
         summary: Signature d'un document au format XMLdsig
         operationId: signatureXMLdsig
         description: |
            L'opération permet au client de signer un document au format XMLDsig-core-1.
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/SignDocument'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipSignatureReport'
                        example:
                           erreurs: []
                           docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '501':
               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format
                  XML pour une signature enveloppée par exemple).
            '503':
               description: Le service n'est pas disponible.
   /signatures/xmldsigwithproof:
      post:
         tags:
         - xmldsig
         summary: Signature d'un document au format XMLdsig avec preuve
         operationId: signatureXMLdsigWithProof
         description: "L'opération permet au client de signer un document au format XMLDsig-core-1 ainsi que de générer une\
            \ preuve de vérification de signature.\n Le client peut demander la vérification des règles applicables suivantes\n\
            \   Validité de la signature du certificat;\n   Présence de la balise \"SigningTime\" dans la signature;\n   \
            \ Présence du certificat utilisé dans la signature; \n   Le certificat de signature n'est pas expiré; \n  L'usage\
            \ de la clé du certificat correspond à un usage de signature électronique et de non répudiation;\n  Le certificat\
            \ de signature n'est pas révoqué; \n Présence d'une signature qui n'est pas vide; \n  L'Autorité de Certification\
            \ est reconnue;\n  Le contenu de la signature est valide;\n  Le client peut également demander l'extraction des\
            \ métadonnées suivante \n  Le DN du certificat;\n   La date de signature;\n   Le rapport du diagnostique;\n  \
            \ Le document original non signé.\n"
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/SignDocumentWithProof'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipSignatureReportWithProof'
                        example:
                           Rapport signature valide:
                              erreurs: []
                              metaData:
                              -  typeMetadata: DN_CERTIFICAT
                                 message: CN=asipsign.flux.henix.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris
                                    (75), C=FR
                              -  typeMetadata: DOCUMENT_ORIGINAL_NON_SIGNE
                                 message: uY29kaW5nPVwiVVRGLThcIj8+PGRv
                              valide: true
                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+
                              preuve: PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI
                           Rapport signature invalide:
                              erreurs:
                              -  codeErreur: ERSIGN02
                                 message: Le certificat n'a pas été émis par l'autorité de certification requise.
                              -  codeErreur: ERSIGN05
                                 message: Le certificat est expiré.
                              metaData: []
                              valide: false
                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+
                              preuve: PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '501':
               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format
                  XML pour une signature enveloppée par exemple).
            '503':
               description: Le service n'est pas disponible.
   /signatures/xadesbaselineb:
      post:
         tags:
         - xades
         summary: Signature d'un document au format Xades Baseline B.
         operationId: signatureXades
         description: |
            L'opération permet au client de signer un document au format XADES Baseline B.
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/SignDocument'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipSignatureReport'
                        example:
                           erreurs: []
                           docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '501':
               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format
                  XML pour une signature enveloppée par exemple).
            '503':
               description: Le service n'est pas disponible.
   /signatures/xadesbaselinebwithproof:
      post:
         tags:
         - xades
         summary: Signature d'un document au format Xades Baseline B avec preuve.
         operationId: signatureXadesWithProof
         description: "L'opération permet au client de signer un document au format XADES Baseline B ainsi que générer une\
            \ preuve de vérification de signature.\n Le client peut demander la vérification des règles applicables suivantes\n\
            \   Validité de la signature du certificat;\n   Présence de la balise \"SigningTime\" dans la signature;\n   \
            \ Présence du certificat utilisé dans la signature; \n   Le certificat de signature n'est pas expiré; \n  L'usage\
            \ de la clé du certificat correspond à un usage de signature électronique et de non répudiation;\n  Le certificat\
            \ de signature n'est pas révoqué; \n Présence d'une signature qui n'est pas vide; \n  L'Autorité de Certification\
            \ est reconnue;\n  Le contenu de la signature est valide;\n  Le client peut également demander l'extraction des\
            \ métadonnées suivante \n  Le DN du certificat;\n   La date de signature;\n   Le rapport du diagnostique;\n  \
            \ Le document original non signé.\n"
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/SignDocumentWithProof'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipSignatureReportWithProof'
                        example:
                           Rapport Signature valide:
                              erreurs: []
                              metaData:
                              -  typeMetadata: DATE_SIGNATURE
                                 message: 2019-09-09T08:24:33Z
                              -  typeMetadata: RAPPORT_DIAGNOSTIQUE
                                 message: cmFwcG9ydCBkaWFnbm9zdGlxdWU=
                              valide: true
                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+
                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+
                           Rapport Signature invalide:
                              erreurs:
                              -  codeErreur: ERSIGN01
                                 message: Le certificat utilisé pour la signature n'a pas été trouvé dans la signature.
                              metaData:
                              -  typeMetadata: DATE_SIGNATURE
                                 message: 2019-09-09T08:24:33Z
                              valide: false
                              docSigne: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PGRvYz5bLi4uXTxkczpTaWduYXR1cmU+PC9kczpTaWduYXR1cmU+PC9kb2M+
                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '501':
               description: L'opération n'est pas supportée par le serveur (soumission d'un document qui n'est pas au format
                  XML pour une signature enveloppée par exemple).
            '503':
               description: Le service n'est pas disponible.
   /validation/signatures/XMLdsig:
      post:
         tags:
         - xmldsig
         summary: Vérification de signature au format XMLdsig.
         operationId: verifSignatureXMLdsig
         description: "L'opération permet au client de vérifier une signature au format XMLDsig-core-1. \n  Le client peut\
            \ demander la vérification des règles applicables suivantes\n   Validité de la signature du certificat;\n   Pré\
            sence de la balise \"SigningTime\" dans la signature;\n    Présence du certificat utilisé dans la signature; \n\
            \   Le certificat de signature n'est pas expiré; \n  L'usage de la clé du certificat correspond à un usage de\
            \ signature électronique et de non répudiation;\n  Le certificat de signature n'est pas révoqué; \n Présence d'une\
            \ signature qui n'est pas vide; \n  L'Autorité de Certification est reconnue;\n  Le contenu de la signature est\
            \ valide;\n  Le client peut également demander l'extraction des métadonnées suivante \n  Le DN du certificat;\n\
            \   La date de signature;\n   Le rapport du diagnostique;\n   Le document original non signé.\n"
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/VerifSignDocument'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipValidationReport'
                        example:
                           Rapport de Vérification valide:
                              erreurs: []
                              metaData:
                              -  typeMetadata: DN_CERTIFICAT
                                 message: CN=asipsign.flux.henix.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris
                                    (75), C=FR
                              valide: true
                           Rapport de Vérification invalide:
                              erreurs:
                              -  codeErreur: ERSIGN05
                                 message: Le certificat est expiré.
                              -  codeErreur: ERSIGN06
                                 message: Le certificat ne contient pas l'usage requis pour signer.
                              valide: false
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '501':
               description: L'opération n'est pas supportée par le serveur (demande de validation d'un document qui n'est
                  pas au format XML).
            '503':
               description: Le service n'est pas disponible.
   /validation/signatures/xmldsigwithproof:
      post:
         tags:
         - xmldsig
         summary: Vérification de signature au format XMLdsig avec preuve
         operationId: verifSignatureXMLdsigWithProof
         description: "L'opération permet au client de vérifier une signature au format XMLDsig-core-1 ainsi que générer une\
            \ preuve de vérification. \n  Le client peut demander la vérification des règles applicables suivantes\n   Validité\
            \ de la signature du certificat;\n   Présence de la balise \"SigningTime\" dans la signature;\n    Présence du\
            \ certificat utilisé dans la signature; \n   Le certificat de signature n'est pas expiré; \n  L'usage de la clé\
            \ du certificat correspond à un usage de signature électronique et de non répudiation;\n  Le certificat de signature\
            \ n'est pas révoqué; \n Présence d'une signature qui n'est pas vide; \n  L'Autorité de Certification est reconnue;\n\
            \  Le contenu de la signature est valide;\n  Le client peut également demander l'extraction des métadonnées suivante\
            \ \n  Le DN du certificat;\n   La date de signature;\n   Le rapport du diagnostique;\n   Le document original\
            \ non signé.\n"
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/VerifSignDocumentWithProof'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipValidationReportWithProof'
                        example:
                           Rapport de Vérification valide:
                              erreurs: []
                              valide: true
                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+
                           Rapport Vérification invalide:
                              erreurs:
                              -  codeErreur: ERSIGN10
                                 message: Le fichier n'est pas signé.
                              metaData:
                              -  typeMetadata: DOCUMENT_ORIGINAL_NON_SIGNE
                                 message: ZG9jdW1lbnQgbm9uIHNpZ27DqQ==
                              valide: false
                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '501':
               description: L'opération n'est pas supportée par le serveur (demande de validation d'un document qui n'est
                  pas au format XML).
            '503':
               description: Le service n'est pas disponible.
   /validation/signatures/xadesbaselineb:
      post:
         tags:
         - xades
         summary: Vérification de signature au format Xades Baseline B.
         operationId: verifSignatureXades
         description: "L'opération permet au client de vérifier une signature au format Xades Baseline B. \n  Le client peut\
            \ demander la vérification des règles applicables suivantes\n   Validité de la signature du certificat;\n   Pré\
            sence de la balise \"SigningTime\" dans la signature;\n    Présence du certificat utilisé dans la signature; \n\
            \   Le certificat de signature n'est pas expiré; \n  L'usage de la clé du certificat correspond à un usage de\
            \ signature électronique et de non répudiation;\n  Le certificat de signature n'est pas révoqué; \n Présence d'une\
            \ signature qui n'est pas vide; \n  L'Autorité de Certification est reconnue;\n  Le contenu de la signature est\
            \ valide;\n  Le client peut également demander l'extraction des métadonnées suivante \n  Le DN du certificat;\n\
            \   La date de signature;\n   Le rapport du diagnostique;\n   Le document original non signé.\n"
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/VerifSignDocument'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipValidationReport'
                        example:
                           Rapport de Vérification valide:
                              erreurs: []
                              metaData:
                              -  typeMetadata: DN_CERTIFICAT
                                 message: CN=asipsign.flux.henix.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris
                                    (75), C=FR
                              valide: true
                           Rapport de Vérification invalide:
                              erreurs:
                              -  codeErreur: ERSIGN05
                                 message: Le certificat est expiré.
                              -  codeErreur: ERSIGN06
                                 message: Le certificat ne contient pas l'usage requis pour signer.
                              valide: false
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '501':
               description: L'opération n'est pas supportée par le serveur (demande de validation d'un document qui n'est
                  pas au format XML).
            '503':
               description: Le service n'est pas disponible.
   /validation/signatures/xadesbaselinebwithproof:
      post:
         tags:
         - xades
         summary: Vérification de signature au format Xades Baseline B avec preuve.
         operationId: verifSignatureXadesWithProof
         description: "L'opération permet au client de vérifier une signature au format Xades Baseline B ainsi que générer\
            \ une preuve de vérification. \n  Le client peut demander la vérification des règles applicables suivantes\n \
            \  Validité de la signature du certificat;\n   Présence de la balise \"SigningTime\" dans la signature;\n    Pré\
            sence du certificat utilisé dans la signature; \n   Le certificat de signature n'est pas expiré; \n  L'usage de\
            \ la clé du certificat correspond à un usage de signature électronique et de non répudiation;\n  Le certificat\
            \ de signature n'est pas révoqué; \n Présence d'une signature qui n'est pas vide; \n  L'Autorité de Certification\
            \ est reconnue;\n  Le contenu de la signature est valide;\n  Le client peut également demander l'extraction des\
            \ métadonnées suivante \n  Le DN du certificat;\n   La date de signature;\n   Le rapport du diagnostique;\n  \
            \ Le document original non signé.\n"
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/VerifSignDocumentWithProof'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipValidationReportWithProof'
                        example:
                           Rapport de Vérification valide:
                              erreurs: []
                              valide: true
                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+
                           Rapport de Vérification invalide:
                              erreurs:
                              -  codeErreur: ERSIGN01
                                 message: Le certificat utilisé pour la signature na pas été trouvé dans la signature.
                              -  codeErreur: ERSIGN02
                                 message: Le certificat na pas été émis par lautorité de certification requise.
                              metaData:
                              -  typeMetadata: DN_CERTIFICAT
                                 message: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75),
                                    C=FR
                              valide: false
                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '501':
               description: L'opération n'est pas supportée par le serveur (demande de validation d'un document qui n'est
                  pas au format XML).
            '503':
               description: Le service n'est pas disponible.
   /validation/certificats:
      post:
         tags:
         - certificats
         summary: Vérification d'un certificat au format DER ou PEM.
         operationId: verifCertificat
         description: "L'opération permet au client de vérifier la validité d'un certificat. \n Le client peut demander la\
            \ vérification des règles applicables suivantes\n   Le certificat n'est pas expiré;\n   Le certificat n'est pas\
            \ révoqué;\n   La signature du certificat est valide;\n   L'Autorité de Certification est reconnue.\n Le client\
            \ peut également demander l'extraction des métadonnées suivantes\n Le DN du certificat;\n   Le rapport du diagnostique.\n"
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/VerifCertDocument'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipValidationReport'
                        example:
                           Rapport de Vérification valide:
                              erreurs: []
                              valide: true
                           Rapport de Vérification invalide:
                              erreurs:
                              -  codeErreur: ERCERT01
                                 message: Le certificat est expiré.
                              metaData:
                              -  typeMetadata: DN_CERTIFICAT
                                 message: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75),
                                    C=FR
                              valide: false
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '503':
               description: Le service n'est pas disponible.
   /validation/certificatswithproof:
      post:
         tags:
         - certificats
         summary: Vérification de certificat au format DER ou PEM avec preuve.
         operationId: verifCertificatWithProof
         description: "L'opération permet au client de vérifier la validité d'un certificat ainsi que de générer une preuve\
            \ de vérification. \n  Le client peut demander la vérification des règles applicables suivantes\n   Le certificat\
            \ n'est pas expiré;\n   Le certificat n'est pas révoqué;\n   La signature du certificat est valide;\n   L'Autorité\
            \ de Certification est reconnue.\n Le client peut également demander l'extraction des métadonnées suivantes\n\
            \ Le DN du certificat;\n   Le rapport du diagnostique.\n"
         requestBody:
            content:
               multipart/form-data:
                  schema:
                     $ref: '#/components/schemas/VerifCertDocumentWithProof'
            required: true
         responses:
            '200':
               description: Requête en succès.
               content:
                  application/json:
                     schema:
                        type: object
                        $ref: '#/components/schemas/AsipValidationReportWithProof'
                        example:
                           Rapport de Vérification valide:
                              erreurs: []
                              valide: true
                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+
                           Rapport de Vérification invalide:
                              erreurs:
                              -  codeErreur: ERCERT01
                                 message: Le certificat est expiré.
                              metaData:
                              -  typeMetadata: DN_CERTIFICAT
                                 message: CN=testsign.test.asipsante.fr, OU=318751275100020, O=ASIP-SANTE, ST=Paris (75),
                                    C=FR
                              valide: false
                              preuve: PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHhuczpBU0lQUHJvb2YgeG1sbnM6ZHM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjXCIgeG1sbnM6eG5zPVwiaHR0cDovL2VzYW50ZS5nb3V2LmZyL0FTSVAvUHJvb2ZcIiB4bWw6aWQ9XCJBU0lQX1Byb29mXCI+Wy4uLl08L3huczpBU0lQUHJvb2Y+
            '400':
               description: Requête mal formée.
            '404':
               description: Ressource introuvable (identifiant de configuration qui n'existe pas par exemple).
            '500':
               description: Erreur interne du serveur.
            '503':
               description: Le service n'est pas disponible.
components:
   schemas:
      Conf:
         description: Listes des différentes configurations
         properties:
            signature:
               type: array
               items:
                  type: object
                  $ref: '#/components/schemas/ConfSign'
            signatureVerification:
               type: array
               items:
                  type: object
                  $ref: '#/components/schemas/ConfVerifSign'
            certificatVerification:
               type: array
               items:
                  type: object
                  $ref: '#/components/schemas/ConfVerifCert'
            proof:
               type: array
               items:
                  type: object
                  $ref: '#/components/schemas/ConfProof'
      Proof:
         type: object
         required:
         - requestId
         - proofTag
         - idProofConf
         - applicantId
         properties:
            requestId:
               description: Identifiant de la demande pour renseigner l'élément RequestId la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            proofTag:
               description: Tag utilisé pour renseigenr l'élément Tag de la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            idProofConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la génération de la preuve (appel de l'opération "/configurations").
               type: integer
               format: int64
            applicantId:
               description: Identifiant du demandeur utilisé pour renseigner le champ applicantId de la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
      SignDocument:
         type: object
         required:
         - idSignConf
         - file
         properties:
            idSignConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la signature (appel de l'opération "/configurations").
               type: integer
               format: int64
            file:
               description: Document à signer.
               type: string
               format: binary
      SignDocumentWithProof:
         type: object
         required:
         - idSignConf
         - file
         - idVerifSignConf
         - requestId
         - proofTag
         - applicantId
         - idProofConf
         properties:
            idSignConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la signature (appel de l'opération "/configurations").
               type: integer
               format: int64
            file:
               description: Document à signer.
               type: string
               format: binary
            idVerifSignConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la vérification de signature (appel de l'opération "/configurations").
               type: integer
               format: int64
            requestId:
               description: Identifiant de la demande pour renseigner l'élément RequestId la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            proofTag:
               description: Tag utilisé pour renseigenr l'élément Tag de la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            applicantId:
               description: Identifiant du demandeur utilisé pour renseigner le champ applicantId de la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            idProofConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la génération de la preuve (appel de l'opération "/configurations").
               type: integer
               format: int64
      VerifCertDocument:
         type: object
         required:
         - idVerifCertConf
         - file
         properties:
            idVerifCertConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la vérification de certificat (appel de l'opération "/configurations").
               type: integer
               format: int64
            file:
               description: Certificat à vérifier.
               type: string
               format: binary
      VerifCertDocumentWithProof:
         type: object
         required:
         - idVerifCertConf
         - file
         - requestId
         - proofTag
         - applicantId
         - idProofConf
         properties:
            idVerifCertConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la vérification de certificat (appel de l'opération "/configurations").
               type: integer
               format: int64
            file:
               description: Certificat à vérifier.
               type: string
               format: binary
            requestId:
               description: Identifiant de la demande pour renseigner l'élément RequestId la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            proofTag:
               description: Tag utilisé pour renseigenr l'élément Tag de la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            applicantId:
               description: Identifiant du demandeur utilisé pour renseigner le champ applicantId de la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            idProofConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la génération de la preuve (appel de l'opération "/configurations").
               type: integer
               format: int64
      VerifSignDocument:
         type: object
         required:
         - idVerifSignConf
         - file
         properties:
            idVerifSignConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la vérification de signature (appel de l'opération "/configurations").
               type: integer
               format: int64
            file:
               description: Document à vérifier.
               type: string
               format: binary
      VerifSignDocumentWithProof:
         type: object
         required:
         - idVerifSignConf
         - file
         - requestId
         - proofTag
         - applicantId
         - idProofConf
         properties:
            idVerifSignConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la vérification de signature (appel de l'opération "/configurations").
               type: integer
               format: int64
            file:
               description: Document à vérifier.
               type: string
               format: binary
            requestId:
               description: Identifiant de la demande pour renseigner l'élément RequestId la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            proofTag:
               description: Tag utilisé pour renseigenr l'élément Tag de la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            applicantId:
               description: Identifiant du demandeur utilisé pour renseigner le champ applicantId de la preuve.
               type: string
               pattern: ^[a-zA-Z_0-9\-]*$
            idProofConf:
               description: Identifiant de configuration à selectionner parmi la liste des configurations disponibles pour
                  la génération de la preuve (appel de l'opération "/configurations").
               type: integer
               format: int64
      ConfSign:
         type: object
         required:
         - idSignConf
         - description
         - signaturePackaging
         - digestAlgorithm
         - canonicalisationAlgorithm
         - dn
         properties:
            idSignConf:
               description: Identifiant de configuration. Cet identifiant est utilisé par les services de signature.
               type: integer
               format: int64
            description:
               description: Description de la configuration de signature.
               type: string
            signaturePackaging:
               type: string
               enum: #
               - ENVELOPING #WithComments
               - ENVELOPED
            digestAlgorithm:
               type: string
               enum:
               - SHA1
               - SHA256
               - SHA512
            canonicalisationAlgorithm:
               type: string
               enum:
               - http://www.w3.org/TR/2001/REC-xml-c14n-20010315
               - http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments
               - http://www.w3.org/2001/10/xml-exc-c14n#
               - http://www.w3.org/2001/10/xml-exc-c14n#WithComments
            dn:
               description: DN du certificat qui sera utilisé pour signer le document #WithComments
               type: string
      ConfVerifSign:
         type: object
         required:
         - idVerifSignConf
         - description
         - rules
         - metaData
         properties:
            idVerifSignConf:
               description: Identifiant de configuration. Cet identifiant est utilisé par le service de vérification de signature.
               type: integer
               format: int64
            description:
               description: Description de la configuration de vérification de signature.
               type: string
            rules:
               description: Liste des règles qui seront utilisées pour vérifier la signature.
               type: array
               items:
                  type: object
                  $ref: '#/components/schemas/Rule'
                  example:
                  -  rule: null
                     id: SignatureCertificatValide
                     description: Vérification de la validité de la signature du certificat.
                  -  rule: null
                     id: ExistanceBaliseSigningTime
#                    - rule:
#                      id: FormatSignature
#                      description: Le format de la signature est valide.
                     description: La balise "SigningTime" existe dans la signature.
                  -  rule: null
                     id: ExistanceDuCertificatDeSignature
                     description: Le certificat utilisé pour la signature existe dans le signature.
                  -  rule: null
                     id: ExpirationCertificat
                     description: Le certificat de signature n'est pas expiré.
                  -  rule: null
                     id: NonRepudiation
                     description: L'usage de la clé du certificat correspond à un usage de signature électronique et de non
                        répudiation.
                  -  rule: null
                     id: RevocationCertificat
                     description: Le certificat de signature n'est pas révoqué.
                  -  rule: null
                     id: SignatureNonVide
                     description: La signature existe et elle n'est pas vide.
                  -  rule: null
                     id: TrustedCertificat
                     description: L'Autorité de Certification est reconnue.
                  -  rule: null
                     id: ValidationSignature
                     description: Le contenu de la signature est valide.
            metaData:
               type: array
               description: Données complémentaires et paramétrables retournées par le service.
               items:
                  type: string
                  example:
                  - DATE_SIGNATURE
                  - DN_CERTIFICAT
                  - RAPPORT_DIAGNOSTIQUE
                  - DOCUMENT_ORIGINAL_NON_SIGNE
      ConfProof:
         type: object
         required:
         - idProofConf
         - description
         - digestAlgorithmForProof
         - canonicalisationAlgorithmForProof
         - dn
         properties:
            idProofConf:
               description: Identifiant de configuration. Cet identifiant est utilisé par le service de génération de preuve.
               type: integer
               format: int64
            description:
               description: Description de la configuration de la génération de la preuve.
               type: string #WithComments
            digestAlgorithmForProof: #WithComments
               type: string #
               enum: #WithComments
               - SHA1
               - SHA256
               - SHA512
            canonicalisationAlgorithmForProof:
               type: string
               enum:
               - http://www.w3.org/TR/2001/REC-xml-c14n-20010315 #WithComments
               - http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments
               - http://www.w3.org/2001/10/xml-exc-c14n#
               - http://www.w3.org/2001/10/xml-exc-c14n#WithComments
            dn:
               description: DN du certificat qui sera utilisé pour signer la preuve. #WithComments
               type: string #
      ConfVerifCert: #WithComments
         type: object
         required:
         - idVerifCertConf
         - description
         - rules
         properties:
            idVerifCertConf:
               description: Identifiant de configuration. Cet identifiant est utilisé par le services de vérification de certificat.
               type: integer
               format: int64
            description:
               description: Description de la configuration de vérification des certificats.
               type: string
            rules:
               type: array
               items:
                  type: object
                  $ref: '#/components/schemas/Rule'
                  example:
                  -  rule: null
                     id: ExpirationCertificat
                     description: Le certificat n'est pas expiré.
                  -  rule: null
                     id: RevocationCertificat
                     description: Le certificat n'est pas révoqué.
                  -  rule: null
                     id: SignatureCertificatValide
                     description: Vérification de la validité de la signature du certificat.
                  -  rule: null
                     id: TrustedCertificat
                     description: L'Autorité de Certification est reconnue.
            metaData:
               type: array
               description: Données complémentaires et paramétrables retournées par le service.
               items:
                  type: string
                  example:
                  - DN_CERTIFICAT
                  - RAPPORT_DIAGNOSTIQUE
      Rule:
         type: object
         required:
         - id
         - description
         properties:
            id:
               type: string
            description:
               type: string
      AsipSignatureReport:
         type: object
         required:
         - erreurs
         - docSigne
         properties:
            erreurs:
               type: array
               items:
                  $ref: '#/components/schemas/Erreur'
            docSigne:
               description: Le document signé encodé en base 64.
               type: string
      AsipSignatureReportWithProof:
         type: object
         required:
         - erreurs
         - metaData
         - valide
         - docSigne
         - preuve
         properties:
            erreurs:
               type: array
               items:
                  $ref: '#/components/schemas/Erreur'
            metaData:
               type: array
               items:
                  $ref: '#/components/schemas/Metadata'
            valide:
               type: boolean
            docSigne:
               description: Le document signé encodé en base 64.
               type: string
            preuve:
               description: La preuve de vérification encodée en base 64.
               type: string
      AsipValidationReport:
         type: object
         required:
         - erreurs
         - metaData
         - valide
         properties:
            erreurs:
               type: array
               items:
                  $ref: '#/components/schemas/Erreur'
            metaData:
               type: array
               items:
                  $ref: '#/components/schemas/Metadata'
            valide:
               type: boolean
      AsipValidationReportWithProof:
         type: object
         required:
         - erreurs
         - metaData
         - valide
         - preuve
         properties:
            erreurs:
               type: array
               items:
                  $ref: '#/components/schemas/Erreur'
            metaData:
               type: array
               items:
                  $ref: '#/components/schemas/Metadata'
            valide:
               type: boolean
            preuve:
               description: La preuve de vérification encodée en base 64.
               type: string
      Erreur:
         required:
         - codeErreur
         - message
         properties:
            codeErreur:
               type: string
            message:
               type: string
      Metadata:
         description: Données complémentaires et paramétrables retournées par le service.
         required:
         - typeMetadata
         - message
         properties:
            typeMetadata:
               type: string
            message:
               type: string